/*
Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

API version: 4.0.0
Contact: support@elasticemail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elasticemail

import (
	"encoding/json"
	"fmt"
)

// ExportFileFormats Format of the exported file.
type ExportFileFormats string

// List of ExportFileFormats
const (
	EXPORTFILEFORMATS_CSV ExportFileFormats = "Csv"
	EXPORTFILEFORMATS_XML ExportFileFormats = "Xml"
	EXPORTFILEFORMATS_JSON ExportFileFormats = "Json"
)

// All allowed values of ExportFileFormats enum
var AllowedExportFileFormatsEnumValues = []ExportFileFormats{
	"Csv",
	"Xml",
	"Json",
}

func (v *ExportFileFormats) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExportFileFormats(value)
	for _, existing := range AllowedExportFileFormatsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExportFileFormats", value)
}

// NewExportFileFormatsFromValue returns a pointer to a valid ExportFileFormats
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExportFileFormatsFromValue(v string) (*ExportFileFormats, error) {
	ev := ExportFileFormats(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExportFileFormats: valid values are %v", v, AllowedExportFileFormatsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExportFileFormats) IsValid() bool {
	for _, existing := range AllowedExportFileFormatsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExportFileFormats value
func (v ExportFileFormats) Ptr() *ExportFileFormats {
	return &v
}

type NullableExportFileFormats struct {
	value *ExportFileFormats
	isSet bool
}

func (v NullableExportFileFormats) Get() *ExportFileFormats {
	return v.value
}

func (v *NullableExportFileFormats) Set(val *ExportFileFormats) {
	v.value = val
	v.isSet = true
}

func (v NullableExportFileFormats) IsSet() bool {
	return v.isSet
}

func (v *NullableExportFileFormats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportFileFormats(val *ExportFileFormats) *NullableExportFileFormats {
	return &NullableExportFileFormats{value: val, isSet: true}
}

func (v NullableExportFileFormats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportFileFormats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


/*
Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

API version: 4.0.0
Contact: support@elasticemail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elasticemail

import (
	"encoding/json"
	"time"
)

// checks if the Suppression type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Suppression{}

// Suppression Suppression - Email returning Hard Bounces
type Suppression struct {
	// Proper email address.
	Email *string `json:"Email,omitempty"`
	// RFC error message
	FriendlyErrorMessage *string `json:"FriendlyErrorMessage,omitempty"`
	// SMTP Error code
	ErrorCode NullableInt32 `json:"ErrorCode,omitempty"`
	// Last change date
	DateUpdated NullableTime `json:"DateUpdated,omitempty"`
}

// NewSuppression instantiates a new Suppression object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuppression() *Suppression {
	this := Suppression{}
	return &this
}

// NewSuppressionWithDefaults instantiates a new Suppression object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuppressionWithDefaults() *Suppression {
	this := Suppression{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *Suppression) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Suppression) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *Suppression) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *Suppression) SetEmail(v string) {
	o.Email = &v
}

// GetFriendlyErrorMessage returns the FriendlyErrorMessage field value if set, zero value otherwise.
func (o *Suppression) GetFriendlyErrorMessage() string {
	if o == nil || IsNil(o.FriendlyErrorMessage) {
		var ret string
		return ret
	}
	return *o.FriendlyErrorMessage
}

// GetFriendlyErrorMessageOk returns a tuple with the FriendlyErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Suppression) GetFriendlyErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.FriendlyErrorMessage) {
		return nil, false
	}
	return o.FriendlyErrorMessage, true
}

// HasFriendlyErrorMessage returns a boolean if a field has been set.
func (o *Suppression) HasFriendlyErrorMessage() bool {
	if o != nil && !IsNil(o.FriendlyErrorMessage) {
		return true
	}

	return false
}

// SetFriendlyErrorMessage gets a reference to the given string and assigns it to the FriendlyErrorMessage field.
func (o *Suppression) SetFriendlyErrorMessage(v string) {
	o.FriendlyErrorMessage = &v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Suppression) GetErrorCode() int32 {
	if o == nil || IsNil(o.ErrorCode.Get()) {
		var ret int32
		return ret
	}
	return *o.ErrorCode.Get()
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Suppression) GetErrorCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorCode.Get(), o.ErrorCode.IsSet()
}

// HasErrorCode returns a boolean if a field has been set.
func (o *Suppression) HasErrorCode() bool {
	if o != nil && o.ErrorCode.IsSet() {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given NullableInt32 and assigns it to the ErrorCode field.
func (o *Suppression) SetErrorCode(v int32) {
	o.ErrorCode.Set(&v)
}
// SetErrorCodeNil sets the value for ErrorCode to be an explicit nil
func (o *Suppression) SetErrorCodeNil() {
	o.ErrorCode.Set(nil)
}

// UnsetErrorCode ensures that no value is present for ErrorCode, not even an explicit nil
func (o *Suppression) UnsetErrorCode() {
	o.ErrorCode.Unset()
}

// GetDateUpdated returns the DateUpdated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Suppression) GetDateUpdated() time.Time {
	if o == nil || IsNil(o.DateUpdated.Get()) {
		var ret time.Time
		return ret
	}
	return *o.DateUpdated.Get()
}

// GetDateUpdatedOk returns a tuple with the DateUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Suppression) GetDateUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.DateUpdated.Get(), o.DateUpdated.IsSet()
}

// HasDateUpdated returns a boolean if a field has been set.
func (o *Suppression) HasDateUpdated() bool {
	if o != nil && o.DateUpdated.IsSet() {
		return true
	}

	return false
}

// SetDateUpdated gets a reference to the given NullableTime and assigns it to the DateUpdated field.
func (o *Suppression) SetDateUpdated(v time.Time) {
	o.DateUpdated.Set(&v)
}
// SetDateUpdatedNil sets the value for DateUpdated to be an explicit nil
func (o *Suppression) SetDateUpdatedNil() {
	o.DateUpdated.Set(nil)
}

// UnsetDateUpdated ensures that no value is present for DateUpdated, not even an explicit nil
func (o *Suppression) UnsetDateUpdated() {
	o.DateUpdated.Unset()
}

func (o Suppression) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Suppression) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["Email"] = o.Email
	}
	if !IsNil(o.FriendlyErrorMessage) {
		toSerialize["FriendlyErrorMessage"] = o.FriendlyErrorMessage
	}
	if o.ErrorCode.IsSet() {
		toSerialize["ErrorCode"] = o.ErrorCode.Get()
	}
	if o.DateUpdated.IsSet() {
		toSerialize["DateUpdated"] = o.DateUpdated.Get()
	}
	return toSerialize, nil
}

type NullableSuppression struct {
	value *Suppression
	isSet bool
}

func (v NullableSuppression) Get() *Suppression {
	return v.value
}

func (v *NullableSuppression) Set(val *Suppression) {
	v.value = val
	v.isSet = true
}

func (v NullableSuppression) IsSet() bool {
	return v.isSet
}

func (v *NullableSuppression) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuppression(val *Suppression) *NullableSuppression {
	return &NullableSuppression{value: val, isSet: true}
}

func (v NullableSuppression) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuppression) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



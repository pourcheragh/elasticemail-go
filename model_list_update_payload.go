/*
Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

API version: 4.0.0
Contact: support@elasticemail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elasticemail

import (
	"encoding/json"
)

// checks if the ListUpdatePayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListUpdatePayload{}

// ListUpdatePayload struct for ListUpdatePayload
type ListUpdatePayload struct {
	// Name of your list if you want to change it.
	NewListName *string `json:"NewListName,omitempty"`
	// True: Allow unsubscribing from this list. Otherwise, false
	AllowUnsubscribe *bool `json:"AllowUnsubscribe,omitempty"`
}

// NewListUpdatePayload instantiates a new ListUpdatePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListUpdatePayload() *ListUpdatePayload {
	this := ListUpdatePayload{}
	return &this
}

// NewListUpdatePayloadWithDefaults instantiates a new ListUpdatePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListUpdatePayloadWithDefaults() *ListUpdatePayload {
	this := ListUpdatePayload{}
	return &this
}

// GetNewListName returns the NewListName field value if set, zero value otherwise.
func (o *ListUpdatePayload) GetNewListName() string {
	if o == nil || IsNil(o.NewListName) {
		var ret string
		return ret
	}
	return *o.NewListName
}

// GetNewListNameOk returns a tuple with the NewListName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListUpdatePayload) GetNewListNameOk() (*string, bool) {
	if o == nil || IsNil(o.NewListName) {
		return nil, false
	}
	return o.NewListName, true
}

// HasNewListName returns a boolean if a field has been set.
func (o *ListUpdatePayload) HasNewListName() bool {
	if o != nil && !IsNil(o.NewListName) {
		return true
	}

	return false
}

// SetNewListName gets a reference to the given string and assigns it to the NewListName field.
func (o *ListUpdatePayload) SetNewListName(v string) {
	o.NewListName = &v
}

// GetAllowUnsubscribe returns the AllowUnsubscribe field value if set, zero value otherwise.
func (o *ListUpdatePayload) GetAllowUnsubscribe() bool {
	if o == nil || IsNil(o.AllowUnsubscribe) {
		var ret bool
		return ret
	}
	return *o.AllowUnsubscribe
}

// GetAllowUnsubscribeOk returns a tuple with the AllowUnsubscribe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListUpdatePayload) GetAllowUnsubscribeOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowUnsubscribe) {
		return nil, false
	}
	return o.AllowUnsubscribe, true
}

// HasAllowUnsubscribe returns a boolean if a field has been set.
func (o *ListUpdatePayload) HasAllowUnsubscribe() bool {
	if o != nil && !IsNil(o.AllowUnsubscribe) {
		return true
	}

	return false
}

// SetAllowUnsubscribe gets a reference to the given bool and assigns it to the AllowUnsubscribe field.
func (o *ListUpdatePayload) SetAllowUnsubscribe(v bool) {
	o.AllowUnsubscribe = &v
}

func (o ListUpdatePayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListUpdatePayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NewListName) {
		toSerialize["NewListName"] = o.NewListName
	}
	if !IsNil(o.AllowUnsubscribe) {
		toSerialize["AllowUnsubscribe"] = o.AllowUnsubscribe
	}
	return toSerialize, nil
}

type NullableListUpdatePayload struct {
	value *ListUpdatePayload
	isSet bool
}

func (v NullableListUpdatePayload) Get() *ListUpdatePayload {
	return v.value
}

func (v *NullableListUpdatePayload) Set(val *ListUpdatePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableListUpdatePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableListUpdatePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListUpdatePayload(val *ListUpdatePayload) *NullableListUpdatePayload {
	return &NullableListUpdatePayload{value: val, isSet: true}
}

func (v NullableListUpdatePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListUpdatePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

API version: 4.0.0
Contact: support@elasticemail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elasticemail

import (
	"encoding/json"
	"fmt"
)

// ContactStatus the model 'ContactStatus'
type ContactStatus string

// List of ContactStatus
const (
	CONTACTSTATUS_TRANSACTIONAL ContactStatus = "Transactional"
	CONTACTSTATUS_ENGAGED ContactStatus = "Engaged"
	CONTACTSTATUS_ACTIVE ContactStatus = "Active"
	CONTACTSTATUS_BOUNCED ContactStatus = "Bounced"
	CONTACTSTATUS_UNSUBSCRIBED ContactStatus = "Unsubscribed"
	CONTACTSTATUS_ABUSE ContactStatus = "Abuse"
	CONTACTSTATUS_INACTIVE ContactStatus = "Inactive"
	CONTACTSTATUS_STALE ContactStatus = "Stale"
	CONTACTSTATUS_NOT_CONFIRMED ContactStatus = "NotConfirmed"
)

// All allowed values of ContactStatus enum
var AllowedContactStatusEnumValues = []ContactStatus{
	"Transactional",
	"Engaged",
	"Active",
	"Bounced",
	"Unsubscribed",
	"Abuse",
	"Inactive",
	"Stale",
	"NotConfirmed",
}

func (v *ContactStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContactStatus(value)
	for _, existing := range AllowedContactStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContactStatus", value)
}

// NewContactStatusFromValue returns a pointer to a valid ContactStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContactStatusFromValue(v string) (*ContactStatus, error) {
	ev := ContactStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContactStatus: valid values are %v", v, AllowedContactStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContactStatus) IsValid() bool {
	for _, existing := range AllowedContactStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContactStatus value
func (v ContactStatus) Ptr() *ContactStatus {
	return &v
}

type NullableContactStatus struct {
	value *ContactStatus
	isSet bool
}

func (v NullableContactStatus) Get() *ContactStatus {
	return v.value
}

func (v *NullableContactStatus) Set(val *ContactStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableContactStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableContactStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactStatus(val *ContactStatus) *NullableContactStatus {
	return &NullableContactStatus{value: val, isSet: true}
}

func (v NullableContactStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


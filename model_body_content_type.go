/*
Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

API version: 4.0.0
Contact: support@elasticemail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elasticemail

import (
	"encoding/json"
	"fmt"
)

// BodyContentType Type of body part
type BodyContentType string

// List of BodyContentType
const (
	BODYCONTENTTYPE_HTML BodyContentType = "HTML"
	BODYCONTENTTYPE_PLAIN_TEXT BodyContentType = "PlainText"
	BODYCONTENTTYPE_AMP BodyContentType = "AMP"
	BODYCONTENTTYPE_CSS BodyContentType = "CSS"
)

// All allowed values of BodyContentType enum
var AllowedBodyContentTypeEnumValues = []BodyContentType{
	"HTML",
	"PlainText",
	"AMP",
	"CSS",
}

func (v *BodyContentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BodyContentType(value)
	for _, existing := range AllowedBodyContentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BodyContentType", value)
}

// NewBodyContentTypeFromValue returns a pointer to a valid BodyContentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBodyContentTypeFromValue(v string) (*BodyContentType, error) {
	ev := BodyContentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BodyContentType: valid values are %v", v, AllowedBodyContentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BodyContentType) IsValid() bool {
	for _, existing := range AllowedBodyContentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BodyContentType value
func (v BodyContentType) Ptr() *BodyContentType {
	return &v
}

type NullableBodyContentType struct {
	value *BodyContentType
	isSet bool
}

func (v NullableBodyContentType) Get() *BodyContentType {
	return v.value
}

func (v *NullableBodyContentType) Set(val *BodyContentType) {
	v.value = val
	v.isSet = true
}

func (v NullableBodyContentType) IsSet() bool {
	return v.isSet
}

func (v *NullableBodyContentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBodyContentType(val *BodyContentType) *NullableBodyContentType {
	return &NullableBodyContentType{value: val, isSet: true}
}

func (v NullableBodyContentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBodyContentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


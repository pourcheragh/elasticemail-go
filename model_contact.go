/*
Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

API version: 4.0.0
Contact: support@elasticemail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elasticemail

import (
	"encoding/json"
	"time"
)

// checks if the Contact type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Contact{}

// Contact Contact
type Contact struct {
	// Proper email address.
	Email *string `json:"Email,omitempty"`
	Status *ContactStatus `json:"Status,omitempty"`
	// First name.
	FirstName *string `json:"FirstName,omitempty"`
	// Last name.
	LastName *string `json:"LastName,omitempty"`
	// A key-value collection of custom contact fields which can be used in the system.
	CustomFields *map[string]string `json:"CustomFields,omitempty"`
	Consent *ConsentData `json:"Consent,omitempty"`
	Source *ContactSource `json:"Source,omitempty"`
	// Date of creation in YYYY-MM-DDThh:ii:ss format
	DateAdded *time.Time `json:"DateAdded,omitempty"`
	// Last change date
	DateUpdated NullableTime `json:"DateUpdated,omitempty"`
	// Date of last status change.
	StatusChangeDate NullableTime `json:"StatusChangeDate,omitempty"`
	Activity *ContactActivity `json:"Activity,omitempty"`
}

// NewContact instantiates a new Contact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContact() *Contact {
	this := Contact{}
	var status ContactStatus = CONTACTSTATUS_TRANSACTIONAL
	this.Status = &status
	var source ContactSource = CONTACTSOURCE_DELIVERY_API
	this.Source = &source
	return &this
}

// NewContactWithDefaults instantiates a new Contact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactWithDefaults() *Contact {
	this := Contact{}
	var status ContactStatus = CONTACTSTATUS_TRANSACTIONAL
	this.Status = &status
	var source ContactSource = CONTACTSOURCE_DELIVERY_API
	this.Source = &source
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *Contact) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *Contact) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *Contact) SetEmail(v string) {
	o.Email = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Contact) GetStatus() ContactStatus {
	if o == nil || IsNil(o.Status) {
		var ret ContactStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetStatusOk() (*ContactStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Contact) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ContactStatus and assigns it to the Status field.
func (o *Contact) SetStatus(v ContactStatus) {
	o.Status = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *Contact) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *Contact) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *Contact) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *Contact) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *Contact) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *Contact) SetLastName(v string) {
	o.LastName = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *Contact) GetCustomFields() map[string]string {
	if o == nil || IsNil(o.CustomFields) {
		var ret map[string]string
		return ret
	}
	return *o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetCustomFieldsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *Contact) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]string and assigns it to the CustomFields field.
func (o *Contact) SetCustomFields(v map[string]string) {
	o.CustomFields = &v
}

// GetConsent returns the Consent field value if set, zero value otherwise.
func (o *Contact) GetConsent() ConsentData {
	if o == nil || IsNil(o.Consent) {
		var ret ConsentData
		return ret
	}
	return *o.Consent
}

// GetConsentOk returns a tuple with the Consent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetConsentOk() (*ConsentData, bool) {
	if o == nil || IsNil(o.Consent) {
		return nil, false
	}
	return o.Consent, true
}

// HasConsent returns a boolean if a field has been set.
func (o *Contact) HasConsent() bool {
	if o != nil && !IsNil(o.Consent) {
		return true
	}

	return false
}

// SetConsent gets a reference to the given ConsentData and assigns it to the Consent field.
func (o *Contact) SetConsent(v ConsentData) {
	o.Consent = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *Contact) GetSource() ContactSource {
	if o == nil || IsNil(o.Source) {
		var ret ContactSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetSourceOk() (*ContactSource, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *Contact) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given ContactSource and assigns it to the Source field.
func (o *Contact) SetSource(v ContactSource) {
	o.Source = &v
}

// GetDateAdded returns the DateAdded field value if set, zero value otherwise.
func (o *Contact) GetDateAdded() time.Time {
	if o == nil || IsNil(o.DateAdded) {
		var ret time.Time
		return ret
	}
	return *o.DateAdded
}

// GetDateAddedOk returns a tuple with the DateAdded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetDateAddedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateAdded) {
		return nil, false
	}
	return o.DateAdded, true
}

// HasDateAdded returns a boolean if a field has been set.
func (o *Contact) HasDateAdded() bool {
	if o != nil && !IsNil(o.DateAdded) {
		return true
	}

	return false
}

// SetDateAdded gets a reference to the given time.Time and assigns it to the DateAdded field.
func (o *Contact) SetDateAdded(v time.Time) {
	o.DateAdded = &v
}

// GetDateUpdated returns the DateUpdated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Contact) GetDateUpdated() time.Time {
	if o == nil || IsNil(o.DateUpdated.Get()) {
		var ret time.Time
		return ret
	}
	return *o.DateUpdated.Get()
}

// GetDateUpdatedOk returns a tuple with the DateUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Contact) GetDateUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.DateUpdated.Get(), o.DateUpdated.IsSet()
}

// HasDateUpdated returns a boolean if a field has been set.
func (o *Contact) HasDateUpdated() bool {
	if o != nil && o.DateUpdated.IsSet() {
		return true
	}

	return false
}

// SetDateUpdated gets a reference to the given NullableTime and assigns it to the DateUpdated field.
func (o *Contact) SetDateUpdated(v time.Time) {
	o.DateUpdated.Set(&v)
}
// SetDateUpdatedNil sets the value for DateUpdated to be an explicit nil
func (o *Contact) SetDateUpdatedNil() {
	o.DateUpdated.Set(nil)
}

// UnsetDateUpdated ensures that no value is present for DateUpdated, not even an explicit nil
func (o *Contact) UnsetDateUpdated() {
	o.DateUpdated.Unset()
}

// GetStatusChangeDate returns the StatusChangeDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Contact) GetStatusChangeDate() time.Time {
	if o == nil || IsNil(o.StatusChangeDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.StatusChangeDate.Get()
}

// GetStatusChangeDateOk returns a tuple with the StatusChangeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Contact) GetStatusChangeDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StatusChangeDate.Get(), o.StatusChangeDate.IsSet()
}

// HasStatusChangeDate returns a boolean if a field has been set.
func (o *Contact) HasStatusChangeDate() bool {
	if o != nil && o.StatusChangeDate.IsSet() {
		return true
	}

	return false
}

// SetStatusChangeDate gets a reference to the given NullableTime and assigns it to the StatusChangeDate field.
func (o *Contact) SetStatusChangeDate(v time.Time) {
	o.StatusChangeDate.Set(&v)
}
// SetStatusChangeDateNil sets the value for StatusChangeDate to be an explicit nil
func (o *Contact) SetStatusChangeDateNil() {
	o.StatusChangeDate.Set(nil)
}

// UnsetStatusChangeDate ensures that no value is present for StatusChangeDate, not even an explicit nil
func (o *Contact) UnsetStatusChangeDate() {
	o.StatusChangeDate.Unset()
}

// GetActivity returns the Activity field value if set, zero value otherwise.
func (o *Contact) GetActivity() ContactActivity {
	if o == nil || IsNil(o.Activity) {
		var ret ContactActivity
		return ret
	}
	return *o.Activity
}

// GetActivityOk returns a tuple with the Activity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact) GetActivityOk() (*ContactActivity, bool) {
	if o == nil || IsNil(o.Activity) {
		return nil, false
	}
	return o.Activity, true
}

// HasActivity returns a boolean if a field has been set.
func (o *Contact) HasActivity() bool {
	if o != nil && !IsNil(o.Activity) {
		return true
	}

	return false
}

// SetActivity gets a reference to the given ContactActivity and assigns it to the Activity field.
func (o *Contact) SetActivity(v ContactActivity) {
	o.Activity = &v
}

func (o Contact) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Contact) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["Email"] = o.Email
	}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if !IsNil(o.FirstName) {
		toSerialize["FirstName"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["LastName"] = o.LastName
	}
	if !IsNil(o.CustomFields) {
		toSerialize["CustomFields"] = o.CustomFields
	}
	if !IsNil(o.Consent) {
		toSerialize["Consent"] = o.Consent
	}
	if !IsNil(o.Source) {
		toSerialize["Source"] = o.Source
	}
	if !IsNil(o.DateAdded) {
		toSerialize["DateAdded"] = o.DateAdded
	}
	if o.DateUpdated.IsSet() {
		toSerialize["DateUpdated"] = o.DateUpdated.Get()
	}
	if o.StatusChangeDate.IsSet() {
		toSerialize["StatusChangeDate"] = o.StatusChangeDate.Get()
	}
	if !IsNil(o.Activity) {
		toSerialize["Activity"] = o.Activity
	}
	return toSerialize, nil
}

type NullableContact struct {
	value *Contact
	isSet bool
}

func (v NullableContact) Get() *Contact {
	return v.value
}

func (v *NullableContact) Set(val *Contact) {
	v.value = val
	v.isSet = true
}

func (v NullableContact) IsSet() bool {
	return v.isSet
}

func (v *NullableContact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContact(val *Contact) *NullableContact {
	return &NullableContact{value: val, isSet: true}
}

func (v NullableContact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



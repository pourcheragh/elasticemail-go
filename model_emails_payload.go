/*
Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

API version: 4.0.0
Contact: support@elasticemail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elasticemail

import (
	"encoding/json"
)

// checks if the EmailsPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailsPayload{}

// EmailsPayload Provide either rule or a list of emails, not both.
type EmailsPayload struct {
	// SQL-like rule. Sending 'All' as a value loads all resources of the given type. Help for building a segment rule can be found here: https://help.elasticemail.com/en/articles/5162182-segment-rules
	Rule *string `json:"Rule,omitempty"`
	// Comma delimited list of contact emails
	Emails []string `json:"Emails,omitempty"`
}

// NewEmailsPayload instantiates a new EmailsPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailsPayload() *EmailsPayload {
	this := EmailsPayload{}
	return &this
}

// NewEmailsPayloadWithDefaults instantiates a new EmailsPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailsPayloadWithDefaults() *EmailsPayload {
	this := EmailsPayload{}
	return &this
}

// GetRule returns the Rule field value if set, zero value otherwise.
func (o *EmailsPayload) GetRule() string {
	if o == nil || IsNil(o.Rule) {
		var ret string
		return ret
	}
	return *o.Rule
}

// GetRuleOk returns a tuple with the Rule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailsPayload) GetRuleOk() (*string, bool) {
	if o == nil || IsNil(o.Rule) {
		return nil, false
	}
	return o.Rule, true
}

// HasRule returns a boolean if a field has been set.
func (o *EmailsPayload) HasRule() bool {
	if o != nil && !IsNil(o.Rule) {
		return true
	}

	return false
}

// SetRule gets a reference to the given string and assigns it to the Rule field.
func (o *EmailsPayload) SetRule(v string) {
	o.Rule = &v
}

// GetEmails returns the Emails field value if set, zero value otherwise.
func (o *EmailsPayload) GetEmails() []string {
	if o == nil || IsNil(o.Emails) {
		var ret []string
		return ret
	}
	return o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailsPayload) GetEmailsOk() ([]string, bool) {
	if o == nil || IsNil(o.Emails) {
		return nil, false
	}
	return o.Emails, true
}

// HasEmails returns a boolean if a field has been set.
func (o *EmailsPayload) HasEmails() bool {
	if o != nil && !IsNil(o.Emails) {
		return true
	}

	return false
}

// SetEmails gets a reference to the given []string and assigns it to the Emails field.
func (o *EmailsPayload) SetEmails(v []string) {
	o.Emails = v
}

func (o EmailsPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailsPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Rule) {
		toSerialize["Rule"] = o.Rule
	}
	if !IsNil(o.Emails) {
		toSerialize["Emails"] = o.Emails
	}
	return toSerialize, nil
}

type NullableEmailsPayload struct {
	value *EmailsPayload
	isSet bool
}

func (v NullableEmailsPayload) Get() *EmailsPayload {
	return v.value
}

func (v *NullableEmailsPayload) Set(val *EmailsPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailsPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailsPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailsPayload(val *EmailsPayload) *NullableEmailsPayload {
	return &NullableEmailsPayload{value: val, isSet: true}
}

func (v NullableEmailsPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailsPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



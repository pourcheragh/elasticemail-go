/*
Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

API version: 4.0.0
Contact: support@elasticemail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elasticemail

import (
	"encoding/json"
)

// checks if the SubaccountEmailSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubaccountEmailSettings{}

// SubaccountEmailSettings Settings related to sending emails
type SubaccountEmailSettings struct {
	// Amount of credits added to Account automatically
	MonthlyRefillCredits *int32 `json:"MonthlyRefillCredits,omitempty"`
	// True, if Account needs credits to send emails. Otherwise, false
	RequiresEmailCredits *bool `json:"RequiresEmailCredits,omitempty"`
	// Maximum size of email including attachments in MB's
	EmailSizeLimit *int32 `json:"EmailSizeLimit,omitempty"`
	// Amount of emails Account can send daily
	DailySendLimit *int32 `json:"DailySendLimit,omitempty"`
	// Maximum number of contacts the Account can have. 0 means that parent account's limit is used.
	MaxContacts *int32 `json:"MaxContacts,omitempty"`
	// Can the SubAccount purchase Private IP for themselves
	EnablePrivateIPPurchase *bool `json:"EnablePrivateIPPurchase,omitempty"`
	// Name of your custom IP Pool to be used in the sending process
	PoolName *string `json:"PoolName,omitempty"`
	ValidSenderDomainOnly NullableBool `json:"ValidSenderDomainOnly,omitempty"`
}

// NewSubaccountEmailSettings instantiates a new SubaccountEmailSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubaccountEmailSettings() *SubaccountEmailSettings {
	this := SubaccountEmailSettings{}
	return &this
}

// NewSubaccountEmailSettingsWithDefaults instantiates a new SubaccountEmailSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubaccountEmailSettingsWithDefaults() *SubaccountEmailSettings {
	this := SubaccountEmailSettings{}
	return &this
}

// GetMonthlyRefillCredits returns the MonthlyRefillCredits field value if set, zero value otherwise.
func (o *SubaccountEmailSettings) GetMonthlyRefillCredits() int32 {
	if o == nil || IsNil(o.MonthlyRefillCredits) {
		var ret int32
		return ret
	}
	return *o.MonthlyRefillCredits
}

// GetMonthlyRefillCreditsOk returns a tuple with the MonthlyRefillCredits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubaccountEmailSettings) GetMonthlyRefillCreditsOk() (*int32, bool) {
	if o == nil || IsNil(o.MonthlyRefillCredits) {
		return nil, false
	}
	return o.MonthlyRefillCredits, true
}

// HasMonthlyRefillCredits returns a boolean if a field has been set.
func (o *SubaccountEmailSettings) HasMonthlyRefillCredits() bool {
	if o != nil && !IsNil(o.MonthlyRefillCredits) {
		return true
	}

	return false
}

// SetMonthlyRefillCredits gets a reference to the given int32 and assigns it to the MonthlyRefillCredits field.
func (o *SubaccountEmailSettings) SetMonthlyRefillCredits(v int32) {
	o.MonthlyRefillCredits = &v
}

// GetRequiresEmailCredits returns the RequiresEmailCredits field value if set, zero value otherwise.
func (o *SubaccountEmailSettings) GetRequiresEmailCredits() bool {
	if o == nil || IsNil(o.RequiresEmailCredits) {
		var ret bool
		return ret
	}
	return *o.RequiresEmailCredits
}

// GetRequiresEmailCreditsOk returns a tuple with the RequiresEmailCredits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubaccountEmailSettings) GetRequiresEmailCreditsOk() (*bool, bool) {
	if o == nil || IsNil(o.RequiresEmailCredits) {
		return nil, false
	}
	return o.RequiresEmailCredits, true
}

// HasRequiresEmailCredits returns a boolean if a field has been set.
func (o *SubaccountEmailSettings) HasRequiresEmailCredits() bool {
	if o != nil && !IsNil(o.RequiresEmailCredits) {
		return true
	}

	return false
}

// SetRequiresEmailCredits gets a reference to the given bool and assigns it to the RequiresEmailCredits field.
func (o *SubaccountEmailSettings) SetRequiresEmailCredits(v bool) {
	o.RequiresEmailCredits = &v
}

// GetEmailSizeLimit returns the EmailSizeLimit field value if set, zero value otherwise.
func (o *SubaccountEmailSettings) GetEmailSizeLimit() int32 {
	if o == nil || IsNil(o.EmailSizeLimit) {
		var ret int32
		return ret
	}
	return *o.EmailSizeLimit
}

// GetEmailSizeLimitOk returns a tuple with the EmailSizeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubaccountEmailSettings) GetEmailSizeLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.EmailSizeLimit) {
		return nil, false
	}
	return o.EmailSizeLimit, true
}

// HasEmailSizeLimit returns a boolean if a field has been set.
func (o *SubaccountEmailSettings) HasEmailSizeLimit() bool {
	if o != nil && !IsNil(o.EmailSizeLimit) {
		return true
	}

	return false
}

// SetEmailSizeLimit gets a reference to the given int32 and assigns it to the EmailSizeLimit field.
func (o *SubaccountEmailSettings) SetEmailSizeLimit(v int32) {
	o.EmailSizeLimit = &v
}

// GetDailySendLimit returns the DailySendLimit field value if set, zero value otherwise.
func (o *SubaccountEmailSettings) GetDailySendLimit() int32 {
	if o == nil || IsNil(o.DailySendLimit) {
		var ret int32
		return ret
	}
	return *o.DailySendLimit
}

// GetDailySendLimitOk returns a tuple with the DailySendLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubaccountEmailSettings) GetDailySendLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.DailySendLimit) {
		return nil, false
	}
	return o.DailySendLimit, true
}

// HasDailySendLimit returns a boolean if a field has been set.
func (o *SubaccountEmailSettings) HasDailySendLimit() bool {
	if o != nil && !IsNil(o.DailySendLimit) {
		return true
	}

	return false
}

// SetDailySendLimit gets a reference to the given int32 and assigns it to the DailySendLimit field.
func (o *SubaccountEmailSettings) SetDailySendLimit(v int32) {
	o.DailySendLimit = &v
}

// GetMaxContacts returns the MaxContacts field value if set, zero value otherwise.
func (o *SubaccountEmailSettings) GetMaxContacts() int32 {
	if o == nil || IsNil(o.MaxContacts) {
		var ret int32
		return ret
	}
	return *o.MaxContacts
}

// GetMaxContactsOk returns a tuple with the MaxContacts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubaccountEmailSettings) GetMaxContactsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxContacts) {
		return nil, false
	}
	return o.MaxContacts, true
}

// HasMaxContacts returns a boolean if a field has been set.
func (o *SubaccountEmailSettings) HasMaxContacts() bool {
	if o != nil && !IsNil(o.MaxContacts) {
		return true
	}

	return false
}

// SetMaxContacts gets a reference to the given int32 and assigns it to the MaxContacts field.
func (o *SubaccountEmailSettings) SetMaxContacts(v int32) {
	o.MaxContacts = &v
}

// GetEnablePrivateIPPurchase returns the EnablePrivateIPPurchase field value if set, zero value otherwise.
func (o *SubaccountEmailSettings) GetEnablePrivateIPPurchase() bool {
	if o == nil || IsNil(o.EnablePrivateIPPurchase) {
		var ret bool
		return ret
	}
	return *o.EnablePrivateIPPurchase
}

// GetEnablePrivateIPPurchaseOk returns a tuple with the EnablePrivateIPPurchase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubaccountEmailSettings) GetEnablePrivateIPPurchaseOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePrivateIPPurchase) {
		return nil, false
	}
	return o.EnablePrivateIPPurchase, true
}

// HasEnablePrivateIPPurchase returns a boolean if a field has been set.
func (o *SubaccountEmailSettings) HasEnablePrivateIPPurchase() bool {
	if o != nil && !IsNil(o.EnablePrivateIPPurchase) {
		return true
	}

	return false
}

// SetEnablePrivateIPPurchase gets a reference to the given bool and assigns it to the EnablePrivateIPPurchase field.
func (o *SubaccountEmailSettings) SetEnablePrivateIPPurchase(v bool) {
	o.EnablePrivateIPPurchase = &v
}

// GetPoolName returns the PoolName field value if set, zero value otherwise.
func (o *SubaccountEmailSettings) GetPoolName() string {
	if o == nil || IsNil(o.PoolName) {
		var ret string
		return ret
	}
	return *o.PoolName
}

// GetPoolNameOk returns a tuple with the PoolName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubaccountEmailSettings) GetPoolNameOk() (*string, bool) {
	if o == nil || IsNil(o.PoolName) {
		return nil, false
	}
	return o.PoolName, true
}

// HasPoolName returns a boolean if a field has been set.
func (o *SubaccountEmailSettings) HasPoolName() bool {
	if o != nil && !IsNil(o.PoolName) {
		return true
	}

	return false
}

// SetPoolName gets a reference to the given string and assigns it to the PoolName field.
func (o *SubaccountEmailSettings) SetPoolName(v string) {
	o.PoolName = &v
}

// GetValidSenderDomainOnly returns the ValidSenderDomainOnly field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubaccountEmailSettings) GetValidSenderDomainOnly() bool {
	if o == nil || IsNil(o.ValidSenderDomainOnly.Get()) {
		var ret bool
		return ret
	}
	return *o.ValidSenderDomainOnly.Get()
}

// GetValidSenderDomainOnlyOk returns a tuple with the ValidSenderDomainOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubaccountEmailSettings) GetValidSenderDomainOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValidSenderDomainOnly.Get(), o.ValidSenderDomainOnly.IsSet()
}

// HasValidSenderDomainOnly returns a boolean if a field has been set.
func (o *SubaccountEmailSettings) HasValidSenderDomainOnly() bool {
	if o != nil && o.ValidSenderDomainOnly.IsSet() {
		return true
	}

	return false
}

// SetValidSenderDomainOnly gets a reference to the given NullableBool and assigns it to the ValidSenderDomainOnly field.
func (o *SubaccountEmailSettings) SetValidSenderDomainOnly(v bool) {
	o.ValidSenderDomainOnly.Set(&v)
}
// SetValidSenderDomainOnlyNil sets the value for ValidSenderDomainOnly to be an explicit nil
func (o *SubaccountEmailSettings) SetValidSenderDomainOnlyNil() {
	o.ValidSenderDomainOnly.Set(nil)
}

// UnsetValidSenderDomainOnly ensures that no value is present for ValidSenderDomainOnly, not even an explicit nil
func (o *SubaccountEmailSettings) UnsetValidSenderDomainOnly() {
	o.ValidSenderDomainOnly.Unset()
}

func (o SubaccountEmailSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubaccountEmailSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MonthlyRefillCredits) {
		toSerialize["MonthlyRefillCredits"] = o.MonthlyRefillCredits
	}
	if !IsNil(o.RequiresEmailCredits) {
		toSerialize["RequiresEmailCredits"] = o.RequiresEmailCredits
	}
	if !IsNil(o.EmailSizeLimit) {
		toSerialize["EmailSizeLimit"] = o.EmailSizeLimit
	}
	if !IsNil(o.DailySendLimit) {
		toSerialize["DailySendLimit"] = o.DailySendLimit
	}
	if !IsNil(o.MaxContacts) {
		toSerialize["MaxContacts"] = o.MaxContacts
	}
	if !IsNil(o.EnablePrivateIPPurchase) {
		toSerialize["EnablePrivateIPPurchase"] = o.EnablePrivateIPPurchase
	}
	if !IsNil(o.PoolName) {
		toSerialize["PoolName"] = o.PoolName
	}
	if o.ValidSenderDomainOnly.IsSet() {
		toSerialize["ValidSenderDomainOnly"] = o.ValidSenderDomainOnly.Get()
	}
	return toSerialize, nil
}

type NullableSubaccountEmailSettings struct {
	value *SubaccountEmailSettings
	isSet bool
}

func (v NullableSubaccountEmailSettings) Get() *SubaccountEmailSettings {
	return v.value
}

func (v *NullableSubaccountEmailSettings) Set(val *SubaccountEmailSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableSubaccountEmailSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableSubaccountEmailSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubaccountEmailSettings(val *SubaccountEmailSettings) *NullableSubaccountEmailSettings {
	return &NullableSubaccountEmailSettings{value: val, isSet: true}
}

func (v NullableSubaccountEmailSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubaccountEmailSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



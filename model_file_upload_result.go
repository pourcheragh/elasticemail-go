/*
Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

API version: 4.0.0
Contact: support@elasticemail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elasticemail

import (
	"encoding/json"
)

// checks if the FileUploadResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileUploadResult{}

// FileUploadResult struct for FileUploadResult
type FileUploadResult struct {
	// How many unique emails were detected the file
	EmailsCount *int32 `json:"EmailsCount,omitempty"`
	// How many email duplicates were detected
	DuplicatedEmailsCount *int32 `json:"DuplicatedEmailsCount,omitempty"`
}

// NewFileUploadResult instantiates a new FileUploadResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileUploadResult() *FileUploadResult {
	this := FileUploadResult{}
	return &this
}

// NewFileUploadResultWithDefaults instantiates a new FileUploadResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileUploadResultWithDefaults() *FileUploadResult {
	this := FileUploadResult{}
	return &this
}

// GetEmailsCount returns the EmailsCount field value if set, zero value otherwise.
func (o *FileUploadResult) GetEmailsCount() int32 {
	if o == nil || IsNil(o.EmailsCount) {
		var ret int32
		return ret
	}
	return *o.EmailsCount
}

// GetEmailsCountOk returns a tuple with the EmailsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileUploadResult) GetEmailsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.EmailsCount) {
		return nil, false
	}
	return o.EmailsCount, true
}

// HasEmailsCount returns a boolean if a field has been set.
func (o *FileUploadResult) HasEmailsCount() bool {
	if o != nil && !IsNil(o.EmailsCount) {
		return true
	}

	return false
}

// SetEmailsCount gets a reference to the given int32 and assigns it to the EmailsCount field.
func (o *FileUploadResult) SetEmailsCount(v int32) {
	o.EmailsCount = &v
}

// GetDuplicatedEmailsCount returns the DuplicatedEmailsCount field value if set, zero value otherwise.
func (o *FileUploadResult) GetDuplicatedEmailsCount() int32 {
	if o == nil || IsNil(o.DuplicatedEmailsCount) {
		var ret int32
		return ret
	}
	return *o.DuplicatedEmailsCount
}

// GetDuplicatedEmailsCountOk returns a tuple with the DuplicatedEmailsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileUploadResult) GetDuplicatedEmailsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.DuplicatedEmailsCount) {
		return nil, false
	}
	return o.DuplicatedEmailsCount, true
}

// HasDuplicatedEmailsCount returns a boolean if a field has been set.
func (o *FileUploadResult) HasDuplicatedEmailsCount() bool {
	if o != nil && !IsNil(o.DuplicatedEmailsCount) {
		return true
	}

	return false
}

// SetDuplicatedEmailsCount gets a reference to the given int32 and assigns it to the DuplicatedEmailsCount field.
func (o *FileUploadResult) SetDuplicatedEmailsCount(v int32) {
	o.DuplicatedEmailsCount = &v
}

func (o FileUploadResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileUploadResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EmailsCount) {
		toSerialize["EmailsCount"] = o.EmailsCount
	}
	if !IsNil(o.DuplicatedEmailsCount) {
		toSerialize["DuplicatedEmailsCount"] = o.DuplicatedEmailsCount
	}
	return toSerialize, nil
}

type NullableFileUploadResult struct {
	value *FileUploadResult
	isSet bool
}

func (v NullableFileUploadResult) Get() *FileUploadResult {
	return v.value
}

func (v *NullableFileUploadResult) Set(val *FileUploadResult) {
	v.value = val
	v.isSet = true
}

func (v NullableFileUploadResult) IsSet() bool {
	return v.isSet
}

func (v *NullableFileUploadResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileUploadResult(val *FileUploadResult) *NullableFileUploadResult {
	return &NullableFileUploadResult{value: val, isSet: true}
}

func (v NullableFileUploadResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileUploadResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



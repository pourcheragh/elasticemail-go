/*
Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

API version: 4.0.0
Contact: support@elasticemail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elasticemail

import (
	"encoding/json"
	"time"
)

// checks if the VerificationFileResultDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VerificationFileResultDetails{}

// VerificationFileResultDetails Detailed verification file result info
type VerificationFileResultDetails struct {
	// Verification result's details
	VerificationResult []EmailValidationResult `json:"VerificationResult,omitempty"`
	// Identifier of this verification result
	VerificationID *string `json:"VerificationID,omitempty"`
	// Origin file name
	Filename *string `json:"Filename,omitempty"`
	VerificationStatus *VerificationStatus `json:"VerificationStatus,omitempty"`
	FileUploadResult *FileUploadResult `json:"FileUploadResult,omitempty"`
	// Date of creation in YYYY-MM-DDThh:ii:ss format
	DateAdded *time.Time `json:"DateAdded,omitempty"`
	// Origin file extension
	Source *string `json:"Source,omitempty"`
}

// NewVerificationFileResultDetails instantiates a new VerificationFileResultDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerificationFileResultDetails() *VerificationFileResultDetails {
	this := VerificationFileResultDetails{}
	var verificationStatus VerificationStatus = VERIFICATIONSTATUS_PROCESSING
	this.VerificationStatus = &verificationStatus
	return &this
}

// NewVerificationFileResultDetailsWithDefaults instantiates a new VerificationFileResultDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerificationFileResultDetailsWithDefaults() *VerificationFileResultDetails {
	this := VerificationFileResultDetails{}
	var verificationStatus VerificationStatus = VERIFICATIONSTATUS_PROCESSING
	this.VerificationStatus = &verificationStatus
	return &this
}

// GetVerificationResult returns the VerificationResult field value if set, zero value otherwise.
func (o *VerificationFileResultDetails) GetVerificationResult() []EmailValidationResult {
	if o == nil || IsNil(o.VerificationResult) {
		var ret []EmailValidationResult
		return ret
	}
	return o.VerificationResult
}

// GetVerificationResultOk returns a tuple with the VerificationResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationFileResultDetails) GetVerificationResultOk() ([]EmailValidationResult, bool) {
	if o == nil || IsNil(o.VerificationResult) {
		return nil, false
	}
	return o.VerificationResult, true
}

// HasVerificationResult returns a boolean if a field has been set.
func (o *VerificationFileResultDetails) HasVerificationResult() bool {
	if o != nil && !IsNil(o.VerificationResult) {
		return true
	}

	return false
}

// SetVerificationResult gets a reference to the given []EmailValidationResult and assigns it to the VerificationResult field.
func (o *VerificationFileResultDetails) SetVerificationResult(v []EmailValidationResult) {
	o.VerificationResult = v
}

// GetVerificationID returns the VerificationID field value if set, zero value otherwise.
func (o *VerificationFileResultDetails) GetVerificationID() string {
	if o == nil || IsNil(o.VerificationID) {
		var ret string
		return ret
	}
	return *o.VerificationID
}

// GetVerificationIDOk returns a tuple with the VerificationID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationFileResultDetails) GetVerificationIDOk() (*string, bool) {
	if o == nil || IsNil(o.VerificationID) {
		return nil, false
	}
	return o.VerificationID, true
}

// HasVerificationID returns a boolean if a field has been set.
func (o *VerificationFileResultDetails) HasVerificationID() bool {
	if o != nil && !IsNil(o.VerificationID) {
		return true
	}

	return false
}

// SetVerificationID gets a reference to the given string and assigns it to the VerificationID field.
func (o *VerificationFileResultDetails) SetVerificationID(v string) {
	o.VerificationID = &v
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *VerificationFileResultDetails) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationFileResultDetails) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *VerificationFileResultDetails) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *VerificationFileResultDetails) SetFilename(v string) {
	o.Filename = &v
}

// GetVerificationStatus returns the VerificationStatus field value if set, zero value otherwise.
func (o *VerificationFileResultDetails) GetVerificationStatus() VerificationStatus {
	if o == nil || IsNil(o.VerificationStatus) {
		var ret VerificationStatus
		return ret
	}
	return *o.VerificationStatus
}

// GetVerificationStatusOk returns a tuple with the VerificationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationFileResultDetails) GetVerificationStatusOk() (*VerificationStatus, bool) {
	if o == nil || IsNil(o.VerificationStatus) {
		return nil, false
	}
	return o.VerificationStatus, true
}

// HasVerificationStatus returns a boolean if a field has been set.
func (o *VerificationFileResultDetails) HasVerificationStatus() bool {
	if o != nil && !IsNil(o.VerificationStatus) {
		return true
	}

	return false
}

// SetVerificationStatus gets a reference to the given VerificationStatus and assigns it to the VerificationStatus field.
func (o *VerificationFileResultDetails) SetVerificationStatus(v VerificationStatus) {
	o.VerificationStatus = &v
}

// GetFileUploadResult returns the FileUploadResult field value if set, zero value otherwise.
func (o *VerificationFileResultDetails) GetFileUploadResult() FileUploadResult {
	if o == nil || IsNil(o.FileUploadResult) {
		var ret FileUploadResult
		return ret
	}
	return *o.FileUploadResult
}

// GetFileUploadResultOk returns a tuple with the FileUploadResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationFileResultDetails) GetFileUploadResultOk() (*FileUploadResult, bool) {
	if o == nil || IsNil(o.FileUploadResult) {
		return nil, false
	}
	return o.FileUploadResult, true
}

// HasFileUploadResult returns a boolean if a field has been set.
func (o *VerificationFileResultDetails) HasFileUploadResult() bool {
	if o != nil && !IsNil(o.FileUploadResult) {
		return true
	}

	return false
}

// SetFileUploadResult gets a reference to the given FileUploadResult and assigns it to the FileUploadResult field.
func (o *VerificationFileResultDetails) SetFileUploadResult(v FileUploadResult) {
	o.FileUploadResult = &v
}

// GetDateAdded returns the DateAdded field value if set, zero value otherwise.
func (o *VerificationFileResultDetails) GetDateAdded() time.Time {
	if o == nil || IsNil(o.DateAdded) {
		var ret time.Time
		return ret
	}
	return *o.DateAdded
}

// GetDateAddedOk returns a tuple with the DateAdded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationFileResultDetails) GetDateAddedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateAdded) {
		return nil, false
	}
	return o.DateAdded, true
}

// HasDateAdded returns a boolean if a field has been set.
func (o *VerificationFileResultDetails) HasDateAdded() bool {
	if o != nil && !IsNil(o.DateAdded) {
		return true
	}

	return false
}

// SetDateAdded gets a reference to the given time.Time and assigns it to the DateAdded field.
func (o *VerificationFileResultDetails) SetDateAdded(v time.Time) {
	o.DateAdded = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *VerificationFileResultDetails) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationFileResultDetails) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *VerificationFileResultDetails) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *VerificationFileResultDetails) SetSource(v string) {
	o.Source = &v
}

func (o VerificationFileResultDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VerificationFileResultDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VerificationResult) {
		toSerialize["VerificationResult"] = o.VerificationResult
	}
	if !IsNil(o.VerificationID) {
		toSerialize["VerificationID"] = o.VerificationID
	}
	if !IsNil(o.Filename) {
		toSerialize["Filename"] = o.Filename
	}
	if !IsNil(o.VerificationStatus) {
		toSerialize["VerificationStatus"] = o.VerificationStatus
	}
	if !IsNil(o.FileUploadResult) {
		toSerialize["FileUploadResult"] = o.FileUploadResult
	}
	if !IsNil(o.DateAdded) {
		toSerialize["DateAdded"] = o.DateAdded
	}
	if !IsNil(o.Source) {
		toSerialize["Source"] = o.Source
	}
	return toSerialize, nil
}

type NullableVerificationFileResultDetails struct {
	value *VerificationFileResultDetails
	isSet bool
}

func (v NullableVerificationFileResultDetails) Get() *VerificationFileResultDetails {
	return v.value
}

func (v *NullableVerificationFileResultDetails) Set(val *VerificationFileResultDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableVerificationFileResultDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableVerificationFileResultDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerificationFileResultDetails(val *VerificationFileResultDetails) *NullableVerificationFileResultDetails {
	return &NullableVerificationFileResultDetails{value: val, isSet: true}
}

func (v NullableVerificationFileResultDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerificationFileResultDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



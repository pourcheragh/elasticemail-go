/*
Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

API version: 4.0.0
Contact: support@elasticemail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elasticemail

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmailRecipient type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailRecipient{}

// EmailRecipient List of recipients
type EmailRecipient struct {
	// Proper email address.
	Email string `json:"Email"`
	// A key-value collection of merge fields which can be used in e-mail body.
	Fields *map[string]string `json:"Fields,omitempty"`
}

type _EmailRecipient EmailRecipient

// NewEmailRecipient instantiates a new EmailRecipient object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailRecipient(email string) *EmailRecipient {
	this := EmailRecipient{}
	this.Email = email
	return &this
}

// NewEmailRecipientWithDefaults instantiates a new EmailRecipient object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailRecipientWithDefaults() *EmailRecipient {
	this := EmailRecipient{}
	return &this
}

// GetEmail returns the Email field value
func (o *EmailRecipient) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *EmailRecipient) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *EmailRecipient) SetEmail(v string) {
	o.Email = v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *EmailRecipient) GetFields() map[string]string {
	if o == nil || IsNil(o.Fields) {
		var ret map[string]string
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailRecipient) GetFieldsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Fields) {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *EmailRecipient) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given map[string]string and assigns it to the Fields field.
func (o *EmailRecipient) SetFields(v map[string]string) {
	o.Fields = &v
}

func (o EmailRecipient) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailRecipient) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Email"] = o.Email
	if !IsNil(o.Fields) {
		toSerialize["Fields"] = o.Fields
	}
	return toSerialize, nil
}

func (o *EmailRecipient) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailRecipient := _EmailRecipient{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmailRecipient)

	if err != nil {
		return err
	}

	*o = EmailRecipient(varEmailRecipient)

	return err
}

type NullableEmailRecipient struct {
	value *EmailRecipient
	isSet bool
}

func (v NullableEmailRecipient) Get() *EmailRecipient {
	return v.value
}

func (v *NullableEmailRecipient) Set(val *EmailRecipient) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailRecipient) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailRecipient) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailRecipient(val *EmailRecipient) *NullableEmailRecipient {
	return &NullableEmailRecipient{value: val, isSet: true}
}

func (v NullableEmailRecipient) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailRecipient) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



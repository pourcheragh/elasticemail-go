/*
Elastic Email REST API

Testing SubAccountsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package elasticemail

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/pourcheragh/elasticemail-go"
)

func Test_elasticemail_SubAccountsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SubAccountsAPIService SubaccountsByEmailCreditsPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var email string

		httpRes, err := apiClient.SubAccountsAPI.SubaccountsByEmailCreditsPatch(context.Background(), email).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubAccountsAPIService SubaccountsByEmailDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var email string

		httpRes, err := apiClient.SubAccountsAPI.SubaccountsByEmailDelete(context.Background(), email).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubAccountsAPIService SubaccountsByEmailGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var email string

		resp, httpRes, err := apiClient.SubAccountsAPI.SubaccountsByEmailGet(context.Background(), email).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubAccountsAPIService SubaccountsByEmailSettingsEmailPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var email string

		resp, httpRes, err := apiClient.SubAccountsAPI.SubaccountsByEmailSettingsEmailPut(context.Background(), email).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubAccountsAPIService SubaccountsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SubAccountsAPI.SubaccountsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubAccountsAPIService SubaccountsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SubAccountsAPI.SubaccountsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

/*
Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

API version: 4.0.0
Contact: support@elasticemail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elasticemail

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmailTransactionalMessageData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailTransactionalMessageData{}

// EmailTransactionalMessageData Email data
type EmailTransactionalMessageData struct {
	Recipients TransactionalRecipient `json:"Recipients"`
	Content *EmailContent `json:"Content,omitempty"`
	Options *Options `json:"Options,omitempty"`
}

type _EmailTransactionalMessageData EmailTransactionalMessageData

// NewEmailTransactionalMessageData instantiates a new EmailTransactionalMessageData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailTransactionalMessageData(recipients TransactionalRecipient) *EmailTransactionalMessageData {
	this := EmailTransactionalMessageData{}
	this.Recipients = recipients
	return &this
}

// NewEmailTransactionalMessageDataWithDefaults instantiates a new EmailTransactionalMessageData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailTransactionalMessageDataWithDefaults() *EmailTransactionalMessageData {
	this := EmailTransactionalMessageData{}
	return &this
}

// GetRecipients returns the Recipients field value
func (o *EmailTransactionalMessageData) GetRecipients() TransactionalRecipient {
	if o == nil {
		var ret TransactionalRecipient
		return ret
	}

	return o.Recipients
}

// GetRecipientsOk returns a tuple with the Recipients field value
// and a boolean to check if the value has been set.
func (o *EmailTransactionalMessageData) GetRecipientsOk() (*TransactionalRecipient, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Recipients, true
}

// SetRecipients sets field value
func (o *EmailTransactionalMessageData) SetRecipients(v TransactionalRecipient) {
	o.Recipients = v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *EmailTransactionalMessageData) GetContent() EmailContent {
	if o == nil || IsNil(o.Content) {
		var ret EmailContent
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailTransactionalMessageData) GetContentOk() (*EmailContent, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *EmailTransactionalMessageData) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given EmailContent and assigns it to the Content field.
func (o *EmailTransactionalMessageData) SetContent(v EmailContent) {
	o.Content = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *EmailTransactionalMessageData) GetOptions() Options {
	if o == nil || IsNil(o.Options) {
		var ret Options
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailTransactionalMessageData) GetOptionsOk() (*Options, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *EmailTransactionalMessageData) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given Options and assigns it to the Options field.
func (o *EmailTransactionalMessageData) SetOptions(v Options) {
	o.Options = &v
}

func (o EmailTransactionalMessageData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailTransactionalMessageData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Recipients"] = o.Recipients
	if !IsNil(o.Content) {
		toSerialize["Content"] = o.Content
	}
	if !IsNil(o.Options) {
		toSerialize["Options"] = o.Options
	}
	return toSerialize, nil
}

func (o *EmailTransactionalMessageData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Recipients",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailTransactionalMessageData := _EmailTransactionalMessageData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmailTransactionalMessageData)

	if err != nil {
		return err
	}

	*o = EmailTransactionalMessageData(varEmailTransactionalMessageData)

	return err
}

type NullableEmailTransactionalMessageData struct {
	value *EmailTransactionalMessageData
	isSet bool
}

func (v NullableEmailTransactionalMessageData) Get() *EmailTransactionalMessageData {
	return v.value
}

func (v *NullableEmailTransactionalMessageData) Set(val *EmailTransactionalMessageData) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailTransactionalMessageData) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailTransactionalMessageData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailTransactionalMessageData(val *EmailTransactionalMessageData) *NullableEmailTransactionalMessageData {
	return &NullableEmailTransactionalMessageData{value: val, isSet: true}
}

func (v NullableEmailTransactionalMessageData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailTransactionalMessageData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



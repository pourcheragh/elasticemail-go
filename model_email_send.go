/*
Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

API version: 4.0.0
Contact: support@elasticemail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elasticemail

import (
	"encoding/json"
)

// checks if the EmailSend type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailSend{}

// EmailSend struct for EmailSend
type EmailSend struct {
	// ID number of transaction
	TransactionID *string `json:"TransactionID,omitempty"`
	// Unique identifier for this email.
	MessageID *string `json:"MessageID,omitempty"`
}

// NewEmailSend instantiates a new EmailSend object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailSend() *EmailSend {
	this := EmailSend{}
	return &this
}

// NewEmailSendWithDefaults instantiates a new EmailSend object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailSendWithDefaults() *EmailSend {
	this := EmailSend{}
	return &this
}

// GetTransactionID returns the TransactionID field value if set, zero value otherwise.
func (o *EmailSend) GetTransactionID() string {
	if o == nil || IsNil(o.TransactionID) {
		var ret string
		return ret
	}
	return *o.TransactionID
}

// GetTransactionIDOk returns a tuple with the TransactionID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailSend) GetTransactionIDOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionID) {
		return nil, false
	}
	return o.TransactionID, true
}

// HasTransactionID returns a boolean if a field has been set.
func (o *EmailSend) HasTransactionID() bool {
	if o != nil && !IsNil(o.TransactionID) {
		return true
	}

	return false
}

// SetTransactionID gets a reference to the given string and assigns it to the TransactionID field.
func (o *EmailSend) SetTransactionID(v string) {
	o.TransactionID = &v
}

// GetMessageID returns the MessageID field value if set, zero value otherwise.
func (o *EmailSend) GetMessageID() string {
	if o == nil || IsNil(o.MessageID) {
		var ret string
		return ret
	}
	return *o.MessageID
}

// GetMessageIDOk returns a tuple with the MessageID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailSend) GetMessageIDOk() (*string, bool) {
	if o == nil || IsNil(o.MessageID) {
		return nil, false
	}
	return o.MessageID, true
}

// HasMessageID returns a boolean if a field has been set.
func (o *EmailSend) HasMessageID() bool {
	if o != nil && !IsNil(o.MessageID) {
		return true
	}

	return false
}

// SetMessageID gets a reference to the given string and assigns it to the MessageID field.
func (o *EmailSend) SetMessageID(v string) {
	o.MessageID = &v
}

func (o EmailSend) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailSend) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TransactionID) {
		toSerialize["TransactionID"] = o.TransactionID
	}
	if !IsNil(o.MessageID) {
		toSerialize["MessageID"] = o.MessageID
	}
	return toSerialize, nil
}

type NullableEmailSend struct {
	value *EmailSend
	isSet bool
}

func (v NullableEmailSend) Get() *EmailSend {
	return v.value
}

func (v *NullableEmailSend) Set(val *EmailSend) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailSend) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailSend) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailSend(val *EmailSend) *NullableEmailSend {
	return &NullableEmailSend{value: val, isSet: true}
}

func (v NullableEmailSend) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailSend) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



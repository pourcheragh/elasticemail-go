/*
Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

API version: 4.0.0
Contact: support@elasticemail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elasticemail

import (
	"encoding/json"
)

// checks if the EmailContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailContent{}

// EmailContent Proper e-mail content
type EmailContent struct {
	// List of e-mail body parts, with user-provided MIME types (text/html, text/plain etc)
	Body []BodyPart `json:"Body,omitempty"`
	// A key-value collection of custom merge fields, shared between recipients. Should be used in e-mail body like so: {firstname}, {lastname} etc.
	Merge *map[string]string `json:"Merge,omitempty"`
	// Attachments provided by sending binary data
	Attachments []MessageAttachment `json:"Attachments,omitempty"`
	// A key-value collection of custom e-mail headers.
	Headers *map[string]string `json:"Headers,omitempty"`
	// Postback header.
	Postback *string `json:"Postback,omitempty"`
	// E-mail with an optional name to be used as the envelope from address (e.g.: John Doe <email@domain.com>)
	EnvelopeFrom *string `json:"EnvelopeFrom,omitempty"`
	// Your e-mail with an optional name (e.g.: John Doe <email@domain.com>)
	From *string `json:"From,omitempty"`
	// To what address should the recipients reply to (e.g. John Doe <email@domain.com>)
	ReplyTo *string `json:"ReplyTo,omitempty"`
	// Default subject of email.
	Subject *string `json:"Subject,omitempty"`
	// Name of template.
	TemplateName *string `json:"TemplateName,omitempty"`
	// Names of previously uploaded files that should be sent as downloadable attachments
	AttachFiles []string `json:"AttachFiles,omitempty"`
	Utm *Utm `json:"Utm,omitempty"`
}

// NewEmailContent instantiates a new EmailContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailContent() *EmailContent {
	this := EmailContent{}
	return &this
}

// NewEmailContentWithDefaults instantiates a new EmailContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailContentWithDefaults() *EmailContent {
	this := EmailContent{}
	return &this
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *EmailContent) GetBody() []BodyPart {
	if o == nil || IsNil(o.Body) {
		var ret []BodyPart
		return ret
	}
	return o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailContent) GetBodyOk() ([]BodyPart, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *EmailContent) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given []BodyPart and assigns it to the Body field.
func (o *EmailContent) SetBody(v []BodyPart) {
	o.Body = v
}

// GetMerge returns the Merge field value if set, zero value otherwise.
func (o *EmailContent) GetMerge() map[string]string {
	if o == nil || IsNil(o.Merge) {
		var ret map[string]string
		return ret
	}
	return *o.Merge
}

// GetMergeOk returns a tuple with the Merge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailContent) GetMergeOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Merge) {
		return nil, false
	}
	return o.Merge, true
}

// HasMerge returns a boolean if a field has been set.
func (o *EmailContent) HasMerge() bool {
	if o != nil && !IsNil(o.Merge) {
		return true
	}

	return false
}

// SetMerge gets a reference to the given map[string]string and assigns it to the Merge field.
func (o *EmailContent) SetMerge(v map[string]string) {
	o.Merge = &v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *EmailContent) GetAttachments() []MessageAttachment {
	if o == nil || IsNil(o.Attachments) {
		var ret []MessageAttachment
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailContent) GetAttachmentsOk() ([]MessageAttachment, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *EmailContent) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []MessageAttachment and assigns it to the Attachments field.
func (o *EmailContent) SetAttachments(v []MessageAttachment) {
	o.Attachments = v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *EmailContent) GetHeaders() map[string]string {
	if o == nil || IsNil(o.Headers) {
		var ret map[string]string
		return ret
	}
	return *o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailContent) GetHeadersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *EmailContent) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string]string and assigns it to the Headers field.
func (o *EmailContent) SetHeaders(v map[string]string) {
	o.Headers = &v
}

// GetPostback returns the Postback field value if set, zero value otherwise.
func (o *EmailContent) GetPostback() string {
	if o == nil || IsNil(o.Postback) {
		var ret string
		return ret
	}
	return *o.Postback
}

// GetPostbackOk returns a tuple with the Postback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailContent) GetPostbackOk() (*string, bool) {
	if o == nil || IsNil(o.Postback) {
		return nil, false
	}
	return o.Postback, true
}

// HasPostback returns a boolean if a field has been set.
func (o *EmailContent) HasPostback() bool {
	if o != nil && !IsNil(o.Postback) {
		return true
	}

	return false
}

// SetPostback gets a reference to the given string and assigns it to the Postback field.
func (o *EmailContent) SetPostback(v string) {
	o.Postback = &v
}

// GetEnvelopeFrom returns the EnvelopeFrom field value if set, zero value otherwise.
func (o *EmailContent) GetEnvelopeFrom() string {
	if o == nil || IsNil(o.EnvelopeFrom) {
		var ret string
		return ret
	}
	return *o.EnvelopeFrom
}

// GetEnvelopeFromOk returns a tuple with the EnvelopeFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailContent) GetEnvelopeFromOk() (*string, bool) {
	if o == nil || IsNil(o.EnvelopeFrom) {
		return nil, false
	}
	return o.EnvelopeFrom, true
}

// HasEnvelopeFrom returns a boolean if a field has been set.
func (o *EmailContent) HasEnvelopeFrom() bool {
	if o != nil && !IsNil(o.EnvelopeFrom) {
		return true
	}

	return false
}

// SetEnvelopeFrom gets a reference to the given string and assigns it to the EnvelopeFrom field.
func (o *EmailContent) SetEnvelopeFrom(v string) {
	o.EnvelopeFrom = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *EmailContent) GetFrom() string {
	if o == nil || IsNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailContent) GetFromOk() (*string, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *EmailContent) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *EmailContent) SetFrom(v string) {
	o.From = &v
}

// GetReplyTo returns the ReplyTo field value if set, zero value otherwise.
func (o *EmailContent) GetReplyTo() string {
	if o == nil || IsNil(o.ReplyTo) {
		var ret string
		return ret
	}
	return *o.ReplyTo
}

// GetReplyToOk returns a tuple with the ReplyTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailContent) GetReplyToOk() (*string, bool) {
	if o == nil || IsNil(o.ReplyTo) {
		return nil, false
	}
	return o.ReplyTo, true
}

// HasReplyTo returns a boolean if a field has been set.
func (o *EmailContent) HasReplyTo() bool {
	if o != nil && !IsNil(o.ReplyTo) {
		return true
	}

	return false
}

// SetReplyTo gets a reference to the given string and assigns it to the ReplyTo field.
func (o *EmailContent) SetReplyTo(v string) {
	o.ReplyTo = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *EmailContent) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailContent) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *EmailContent) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *EmailContent) SetSubject(v string) {
	o.Subject = &v
}

// GetTemplateName returns the TemplateName field value if set, zero value otherwise.
func (o *EmailContent) GetTemplateName() string {
	if o == nil || IsNil(o.TemplateName) {
		var ret string
		return ret
	}
	return *o.TemplateName
}

// GetTemplateNameOk returns a tuple with the TemplateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailContent) GetTemplateNameOk() (*string, bool) {
	if o == nil || IsNil(o.TemplateName) {
		return nil, false
	}
	return o.TemplateName, true
}

// HasTemplateName returns a boolean if a field has been set.
func (o *EmailContent) HasTemplateName() bool {
	if o != nil && !IsNil(o.TemplateName) {
		return true
	}

	return false
}

// SetTemplateName gets a reference to the given string and assigns it to the TemplateName field.
func (o *EmailContent) SetTemplateName(v string) {
	o.TemplateName = &v
}

// GetAttachFiles returns the AttachFiles field value if set, zero value otherwise.
func (o *EmailContent) GetAttachFiles() []string {
	if o == nil || IsNil(o.AttachFiles) {
		var ret []string
		return ret
	}
	return o.AttachFiles
}

// GetAttachFilesOk returns a tuple with the AttachFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailContent) GetAttachFilesOk() ([]string, bool) {
	if o == nil || IsNil(o.AttachFiles) {
		return nil, false
	}
	return o.AttachFiles, true
}

// HasAttachFiles returns a boolean if a field has been set.
func (o *EmailContent) HasAttachFiles() bool {
	if o != nil && !IsNil(o.AttachFiles) {
		return true
	}

	return false
}

// SetAttachFiles gets a reference to the given []string and assigns it to the AttachFiles field.
func (o *EmailContent) SetAttachFiles(v []string) {
	o.AttachFiles = v
}

// GetUtm returns the Utm field value if set, zero value otherwise.
func (o *EmailContent) GetUtm() Utm {
	if o == nil || IsNil(o.Utm) {
		var ret Utm
		return ret
	}
	return *o.Utm
}

// GetUtmOk returns a tuple with the Utm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailContent) GetUtmOk() (*Utm, bool) {
	if o == nil || IsNil(o.Utm) {
		return nil, false
	}
	return o.Utm, true
}

// HasUtm returns a boolean if a field has been set.
func (o *EmailContent) HasUtm() bool {
	if o != nil && !IsNil(o.Utm) {
		return true
	}

	return false
}

// SetUtm gets a reference to the given Utm and assigns it to the Utm field.
func (o *EmailContent) SetUtm(v Utm) {
	o.Utm = &v
}

func (o EmailContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Body) {
		toSerialize["Body"] = o.Body
	}
	if !IsNil(o.Merge) {
		toSerialize["Merge"] = o.Merge
	}
	if !IsNil(o.Attachments) {
		toSerialize["Attachments"] = o.Attachments
	}
	if !IsNil(o.Headers) {
		toSerialize["Headers"] = o.Headers
	}
	if !IsNil(o.Postback) {
		toSerialize["Postback"] = o.Postback
	}
	if !IsNil(o.EnvelopeFrom) {
		toSerialize["EnvelopeFrom"] = o.EnvelopeFrom
	}
	if !IsNil(o.From) {
		toSerialize["From"] = o.From
	}
	if !IsNil(o.ReplyTo) {
		toSerialize["ReplyTo"] = o.ReplyTo
	}
	if !IsNil(o.Subject) {
		toSerialize["Subject"] = o.Subject
	}
	if !IsNil(o.TemplateName) {
		toSerialize["TemplateName"] = o.TemplateName
	}
	if !IsNil(o.AttachFiles) {
		toSerialize["AttachFiles"] = o.AttachFiles
	}
	if !IsNil(o.Utm) {
		toSerialize["Utm"] = o.Utm
	}
	return toSerialize, nil
}

type NullableEmailContent struct {
	value *EmailContent
	isSet bool
}

func (v NullableEmailContent) Get() *EmailContent {
	return v.value
}

func (v *NullableEmailContent) Set(val *EmailContent) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailContent) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailContent(val *EmailContent) *NullableEmailContent {
	return &NullableEmailContent{value: val, isSet: true}
}

func (v NullableEmailContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



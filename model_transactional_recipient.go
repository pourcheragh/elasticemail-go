/*
Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

API version: 4.0.0
Contact: support@elasticemail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package elasticemail

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionalRecipient type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionalRecipient{}

// TransactionalRecipient List of transactional recipients
type TransactionalRecipient struct {
	// List of recipients (visible to others)
	To []string `json:"To"`
	// List of Carbon Copy recipients (visible to others)
	CC []string `json:"CC,omitempty"`
	// List of Blind Carbon Copy recipients (hidden from other recipients)
	BCC []string `json:"BCC,omitempty"`
}

type _TransactionalRecipient TransactionalRecipient

// NewTransactionalRecipient instantiates a new TransactionalRecipient object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionalRecipient(to []string) *TransactionalRecipient {
	this := TransactionalRecipient{}
	this.To = to
	return &this
}

// NewTransactionalRecipientWithDefaults instantiates a new TransactionalRecipient object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionalRecipientWithDefaults() *TransactionalRecipient {
	this := TransactionalRecipient{}
	return &this
}

// GetTo returns the To field value
func (o *TransactionalRecipient) GetTo() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *TransactionalRecipient) GetToOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.To, true
}

// SetTo sets field value
func (o *TransactionalRecipient) SetTo(v []string) {
	o.To = v
}

// GetCC returns the CC field value if set, zero value otherwise.
func (o *TransactionalRecipient) GetCC() []string {
	if o == nil || IsNil(o.CC) {
		var ret []string
		return ret
	}
	return o.CC
}

// GetCCOk returns a tuple with the CC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionalRecipient) GetCCOk() ([]string, bool) {
	if o == nil || IsNil(o.CC) {
		return nil, false
	}
	return o.CC, true
}

// HasCC returns a boolean if a field has been set.
func (o *TransactionalRecipient) HasCC() bool {
	if o != nil && !IsNil(o.CC) {
		return true
	}

	return false
}

// SetCC gets a reference to the given []string and assigns it to the CC field.
func (o *TransactionalRecipient) SetCC(v []string) {
	o.CC = v
}

// GetBCC returns the BCC field value if set, zero value otherwise.
func (o *TransactionalRecipient) GetBCC() []string {
	if o == nil || IsNil(o.BCC) {
		var ret []string
		return ret
	}
	return o.BCC
}

// GetBCCOk returns a tuple with the BCC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionalRecipient) GetBCCOk() ([]string, bool) {
	if o == nil || IsNil(o.BCC) {
		return nil, false
	}
	return o.BCC, true
}

// HasBCC returns a boolean if a field has been set.
func (o *TransactionalRecipient) HasBCC() bool {
	if o != nil && !IsNil(o.BCC) {
		return true
	}

	return false
}

// SetBCC gets a reference to the given []string and assigns it to the BCC field.
func (o *TransactionalRecipient) SetBCC(v []string) {
	o.BCC = v
}

func (o TransactionalRecipient) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionalRecipient) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["To"] = o.To
	if !IsNil(o.CC) {
		toSerialize["CC"] = o.CC
	}
	if !IsNil(o.BCC) {
		toSerialize["BCC"] = o.BCC
	}
	return toSerialize, nil
}

func (o *TransactionalRecipient) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"To",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionalRecipient := _TransactionalRecipient{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionalRecipient)

	if err != nil {
		return err
	}

	*o = TransactionalRecipient(varTransactionalRecipient)

	return err
}

type NullableTransactionalRecipient struct {
	value *TransactionalRecipient
	isSet bool
}

func (v NullableTransactionalRecipient) Get() *TransactionalRecipient {
	return v.value
}

func (v *NullableTransactionalRecipient) Set(val *TransactionalRecipient) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionalRecipient) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionalRecipient) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionalRecipient(val *TransactionalRecipient) *NullableTransactionalRecipient {
	return &NullableTransactionalRecipient{value: val, isSet: true}
}

func (v NullableTransactionalRecipient) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionalRecipient) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


